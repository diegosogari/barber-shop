package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"strings"

	"github.com/dsogari/barber-shop/graph/generated"
	"github.com/dsogari/barber-shop/orm"
)

// ListShop is the resolver for the listShop field.
func (r *queryResolver) ListShop(ctx context.Context) ([]*generated.Shop, error) {
	var objects []*generated.Shop
	err := orm.Db.Find(&objects).Error
	return objects, err
}

// GetShop is the resolver for the getShop field.
func (r *queryResolver) GetShop(ctx context.Context, id int) (*generated.Shop, error) {
	var object *generated.Shop
	err := orm.Db.First(&object, id).Error
	return object, err
}

// ListService is the resolver for the listService field.
func (r *queryResolver) ListService(ctx context.Context) ([]*generated.Service, error) {
	var objects []*generated.Service
	err := orm.Db.Find(&objects).Error
	return objects, err
}

// GetService is the resolver for the getService field.
func (r *queryResolver) GetService(ctx context.Context, id int) (*generated.Service, error) {
	var object *generated.Service
	err := orm.Db.First(&object, id).Error
	return object, err
}

// ListClient is the resolver for the listClient field.
func (r *queryResolver) ListClient(ctx context.Context) ([]*generated.Client, error) {
	var objects []*generated.Client
	err := orm.Db.Find(&objects).Error
	return objects, err
}

// GetClient is the resolver for the getClient field.
func (r *queryResolver) GetClient(ctx context.Context, id int) (*generated.Client, error) {
	var object *generated.Client
	err := orm.Db.First(&object, id).Error
	return object, err
}

// ListBarber is the resolver for the listBarber field.
func (r *queryResolver) ListBarber(ctx context.Context) ([]*generated.Barber, error) {
	var objects []*generated.Barber
	err := orm.Db.Find(&objects).Error
	return objects, err
}

// GetBarber is the resolver for the getBarber field.
func (r *queryResolver) GetBarber(ctx context.Context, id int) (*generated.Barber, error) {
	var object *generated.Barber
	err := orm.Db.First(&object, id).Error
	return object, err
}

// ListAttendance is the resolver for the listAttendance field.
func (r *queryResolver) ListAttendance(ctx context.Context) ([]*generated.Attendance, error) {
	var objects []*generated.Attendance
	err := orm.Db.Preload("Services").Find(&objects).Error
	return objects, err
}

// GetAttendance is the resolver for the getAttendance field.
func (r *queryResolver) GetAttendance(ctx context.Context, id int) (*generated.Attendance, error) {
	var object *generated.Attendance
	err := orm.Db.Preload("Services").First(&object, id).Error
	return object, err
}

// SearchAttendance is the resolver for the searchAttendance field.
func (r *queryResolver) SearchAttendance(ctx context.Context, input generated.AttendanceSearchInput) ([]*generated.Attendance, error) {
	var objects []*generated.Attendance
	err := orm.Db.Preload("Services").Find(&objects, "attended_at BETWEEN ? AND ?"+
		getIntArray("shop_id", input.ShopIDs)+
		getIntArray("barber_id", input.BarberIDs)+
		getIntArray("client_id", input.ClientIDs), input.Begin, input.End).Error
	return objects, err
}

func getIntArray(columnName string, array []int) string {
	var result string
	if len(array) > 0 {
		str := strings.ReplaceAll(fmt.Sprint(array), " ", ",")
		result = fmt.Sprintf(" AND %s IN (%s)", columnName, str[1:len(str)-1])
	}
	return result
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
